cmake_minimum_required(VERSION 3.18)

# Extract version information from Python library
set(VERSION_REGEX "__version__[ \t]+=[ \t]+\'(.+)\'")
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/fmf2/__init__.py" VERSION_STRING REGEX ${VERSION_REGEX})
string(REGEX REPLACE ${VERSION_REGEX} "\\1" VERSION_STRING "${VERSION_STRING}")

project(fmf2 VERSION ${VERSION_STRING})

# Set minimum required C++ version
set(CMAKE_CXX_STANDARD 17 CACHE STRING "The C++ standard to use")
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# If not specified build as release version
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Release)
endif()

# Add Cython debug if in debug mode
if(CMAKE_BUILD_TYPE STREQUAL "Debug")
  set(CYTHON_FLAGS "${CYTHON_FLAGS} --gdb")
endif()

find_package(Cython REQUIRED)
find_package(Python3 REQUIRED COMPONENTS Development NumPy)
find_package(PythonExtensions REQUIRED)

# Add OpenMP support if found
find_package(OpenMP)

# Mark the SYCL backend as optional
find_package(hipSYCL CONFIG)

# Needed for linking Python and libraries generated by this project
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Add FMF2 specific options
option(CPU_SKIP "Allow CPU code paths to skip iteration if weight is too small" ON)
option(AVX512 "Compile with AVX512 support" ON)

add_subdirectory(fmf2)
